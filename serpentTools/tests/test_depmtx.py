from unittest import TestCase

from numpy import array, longfloat, subtract, matrix
from numpy.testing import assert_array_equal

from serpentTools.data import getFile
from serpentTools.parsers.depmatrix import DepmtxReader, readDepmtx

TEST_FILE = getFile('depmtx_ref.m')


class DepmtxTestHelper(TestCase):
    """Class that tests the depletion matrix reader."""

    NNZ = 633
    # Number of non-zero elements in depletion matrix
    NZAI = 74
    # Number of isotopes tracked in problem
    DELTA_T = 4.320000000000000000000000000000E+04
    REF_N0 = array([
        1.173442217504030343064509202267E-07,
        6.107569078762340004851731368926E-12,
        7.480538061277827561791279780104E-13,
        7.524067572800136379093002835802E-16,
        1.661130197369227900614564647189E-34,
        1.675801854789014386183730842246E-09,
        1.192237903500088105213513116849E-36,
        1.890406222896768882728698365910E-26,
        5.091950543309340069771352296676E-16,
        7.911421124933054154780514513478E-34,
        1.689898761577859815115503669069E-22,
        6.926766951415833754483467930862E-12,
        7.524063448446756545011516533849E-16,
        8.520767511801618466862212388100E-13,
        4.524295397668215423792048568430E-02,
        1.713078813777506066430984614625E-12,
        1.862288707872369813372947403112E-51,
        2.322873148851457543049133423703E-50,
        1.153521518831756615412547129225E-55,
        7.725246857049638153859558555191E-50,
        5.740847412491484174976985237696E-44,
        1.554140631730936206248064780630E-42,
        3.107572656841361401222752182298E-40,
        9.125664606547203192562418890936E-40,
        6.822161440850004965395235917066E-39,
        9.718256156712333137588821437962E-56,
        1.592374439138871796546908096303E-51,
        1.147648747079376242752346451897E-46,
        1.152034152616066657377746473458E-43,
        5.660727987271489232604452869517E-41,
        4.494116014593675508845864482010E-34,
        8.992102021774057089345367716728E-31,
        8.656941793481945389717947438184E-29,
        5.969109819262743373887639698821E-28,
        1.066420576636048813144555599963E-26,
        9.108836473603100649831548692105E-27,
        7.560066322046630167217097343197E-36,
        6.081573581839334987004826699316E-33,
        7.935626012595454177696935141418E-40,
        1.678574008463506481983207619551E-29,
        2.769957175697237981666487181200E-26,
        2.429391733245793121208155852500E-30,
        6.936582457352356715849246750519E-27,
        3.219604350939921213799816620000E-20,
        4.148638075920098198712106974897E-17,
        6.021455789043798227309382550971E-16,
        3.682546570729935046911641193438E-15,
        2.259271829349722819970385358417E-15,
        2.859929317407144400488030772242E-15,
        5.345407104498671977043211593605E-28,
        2.345326309390006926071919624630E-25,
        1.361400652117108462473879542241E-17,
        4.179353789677477343472192526060E-16,
        4.615272469671493964111769943884E-15,
        2.153465888083002736889210511003E-15,
        2.903077623025441183555178209283E-15,
        4.903581690976771111438893083466E-16,
        3.624995440717127337877528841431E-13,
        4.616917844075559804227840143831E-05,
        2.969194385985983930184572976430E-04,
        4.137300906148564500451614289744E-04,
        3.147461344099014199891806153886E-04,
        4.982967128670550598437682943143E-04,
        4.376379144643168764457208386176E-04,
        3.846796343279221003716384420470E-17,
        6.870389061970011623342495241181E-14,
        4.293077139753901466342252829511E-06,
        5.621565873446702577345690521327E-04,
        2.982886100926178976367134239832E-08,
        1.456340924238686170077029955405E-09,
        2.054873740352017655319549760407E-02,
        2.108367055387284252194156353166E-07,
        9.841801952371811001202615665146E-12,
        8.052266563002563381135156316475E-16,
    ], dtype=longfloat)
    REF_ZAI = array([
        -1, 10010, 10020, 10030, 20030, 20040, 30060, 30070, 40090, 50100,
        50110, 60120, 70140, 70150, 80160, 80170, 561380, 561400, 581380,
        581390, 581400, 581410, 581420, 581430, 581440, 591410, 591420,
        591430, 601420, 601430, 601440, 601450, 601460, 601470, 601480,
        601500, 611470, 611480, 611481, 611490, 611510, 621470, 621480,
        621490, 621500, 621510, 621520, 621530, 621540, 631510, 631520,
        631530, 631540, 631550, 631560, 631570, 641520, 641530, 641540,
        641550, 641560, 641570, 641580, 641600, 922320, 922330, 922340,
        922350, 922360, 922370, 922380, 922390, 922400, 922410,
    ], dtype=int)
    REF_N1 = array([
        1.173401055965248730759983657700E-07,
        6.032533164919816465405638995097E-12,
        7.311813300199797851742243369471E-13,
        5.713459203264517940166721276285E-16,
        1.514082744495717618511653374904E-34,
        1.676046522432308693332881666148E-09,
        9.519139881536916417663824770864E-37,
        1.529028035294245073523573136426E-26,
        5.060433619751555762802705303744E-16,
        6.199995212679281789456900943579E-34,
        1.335014790831673510318193071082E-22,
        6.757838821356679698956935594852E-12,
        5.713456007267241150663798047094E-16,
        8.424809681243940884598693412579E-13,
        4.524295397652929040521740944314E-02,
        1.713040787324974953168783041711E-12,
        2.086936986944467839395658928337E-51,
        2.424636326168540090075386101336E-50,
        1.788687165347957167596924255025E-55,
        9.101155945340115955547690599875E-50,
        6.420431240825689197411479778674E-44,
        1.771525301076316113494595647878E-42,
        3.478551600249355163617301435932E-40,
        9.521324405439976863171889655991E-40,
        7.149865641067108751677561296294E-39,
        1.744718381888471945301365449911E-55,
        1.185006777468723203330033141583E-51,
        1.285035805356645472318779218748E-46,
        2.117365023046369054200018655331E-43,
        8.684576384156420330852601226512E-41,
        4.803324493458369050075439240768E-34,
        1.026110271145849969977874162598E-30,
        9.022014210426223285916750044500E-29,
        6.233210435129691323827046118965E-28,
        1.066792222321720791835656671149E-26,
        8.980460571499579168417762099419E-27,
        6.103540890358065466542477343155E-36,
        6.947943882988825618129332450443E-33,
        6.404476937421236982049528427135E-40,
        2.018206392878992481798368957525E-29,
        2.790107609857000023234603142502E-26,
        4.263803895688323529581167306147E-30,
        8.776936342912974367802312185072E-27,
        3.277331483139485410940688303589E-20,
        4.362282990846295586173273243422E-17,
        6.018451485514438023793066866156E-16,
        3.676594667688408777187897086019E-15,
        2.246115191524154584982478063564E-15,
        2.963464693353292087487961630190E-15,
        8.052819883719730907580559266659E-28,
        1.943022161916288284402398921807E-25,
        1.506650685185109958714652566953E-17,
        4.189202353832502409604214034694E-16,
        4.584325555254872377497505130491E-15,
        2.140959918995448350720015946699E-15,
        3.011708678168803005259577804103E-15,
        6.990225158214548705939551542809E-16,
        3.591863342579647088136982946840E-13,
        4.616918224502710495910084986804E-05,
        2.969194336491627833965467608834E-04,
        4.137300830938893110404197539509E-04,
        3.147461490201626087975794732188E-04,
        4.982967213102169196092816605415E-04,
        4.376379155302929598904404517867E-04,
        3.599126935824117372938724886054E-17,
        6.895207702686341230635980042444E-14,
        4.293082654443887190363459555043E-06,
        5.621565968088255201701164409656E-04,
        2.982480052881702203532545466386E-08,
        1.448384117008583481585383264604E-09,
        2.054873733404119148793220972493E-02,
        2.108922382983142802931309477132E-07,
        9.823435767284427578223342980928E-12,
        8.030354784613487489140522453118E-16,
    ], dtype=longfloat)

    # Values for comparing depletion matrix
    # Taking the first and last N_MTX values
    N_MTX = 20
    MTX_NZI = array([
        (2, 2), (3, 2), (2, 3), (3, 3), (4, 3), (3, 4), (4, 4), (2, 5), (3, 5),
        (4, 5), (5, 5), (6, 5), (1, 7), (2, 7), (4, 7), (6, 7), (7, 7), (8, 7),
        (1, 8), (2, 8),
        (70, 71), (71, 71), (72, 71), (1, 72), (69, 72), (70, 72),
        (71, 72), (72, 72), (73, 72), (1, 73), (70, 73), (71, 73), (72, 73),
        (73, 73), (74, 73), (1, 74), (71, 74), (72, 74), (73, 74), (74, 74),
    ], dtype=int, order='F')
    # Take care of one-based indexing
    subtract(MTX_NZI, 1, MTX_NZI)

    MTX_NZV = array([
        -1.500972704886488647503396416401E-12,
        1.500972704886488647503396416401E-12,
        5.687870226606423932896571207969E-13,
        -5.720883466943302981363433665387E-13,
        3.301324033687918651752087109537E-15,
        1.749958583327165427037404794306E-15,
        -1.749958583327165427037404794306E-15,
        2.400849160415504089701142504797E-08,
        5.596261889150096989202279986771E-13,
        2.400849160415504089701142504797E-08,
        -2.400877155829509548378333902603E-08,
        1.410455984399341515984842300015E-16,
        4.274387117787504148494971485424E-13,
        5.669970971631371861174436592637E-13,
        4.321011424426133721533998806145E-09,
        4.321150982811518179391100643932E-09,
        -4.321753944145338780316668359817E-09,
        1.755226220421016840304411064755E-13,
        2.070037506129010201155151039667E-13,
        8.616923228428927278508467844463E-18,
        1.629784194387017066647753331461E-12,
        -2.732057721981124399402959788160E-10,
        2.375806154530197521556325576572E-10,
        1.666618225171173377605536859274E-10,
        2.373073551527540088138019775358E-17,
        7.698871584719037837413242298124E-15,
        6.724016768076679234300100433496E-12,
        -2.330028224960282426601532792263E-09,
        2.156634663072768253031125400190E-09,
        2.289279381588127161917802036529E-11,
        1.503583437393198221464490811220E-17,
        2.244601387912072907659380475542E-14,
        2.169986275949386042955378854562E-12,
        -5.701980527557383083863741681354E-09,
        5.676895286415838832553589751772E-09,
        3.197056878578938323783391713606E-09,
        1.520066909515985301080773652035E-16,
        2.166500765256806589294628619590E-14,
        8.673595631793918327440743302798E-12,
        -3.205752291225075667717126458572E-09,
    ], dtype=longfloat)

    def test_vectors_deltaT(self):
        """Verify the isotopics are stored correctly."""
        assert_array_equal(self.reader.n0, self.REF_N0)
        assert_array_equal(self.reader.n1, self.REF_N1)
        assert_array_equal(self.reader.zai, self.REF_ZAI)
        self.assertEqual(self.reader.deltaT, self.DELTA_T)

    def test_depletionMatrix(self):
        """Verify the contents of the depletion matrix."""
        # Non-zero elements
        nonzeroRows, nonzeroCols = self.reader.depmtx.nonzero()
        self.assertTupleEqual(nonzeroRows.shape, (self.NNZ, ))
        self.assertTupleEqual(nonzeroCols.shape, (self.NNZ, ))
        # Verify against first and last N_MTX values in file
        matSlice = self.reader.depmtx[self.MTX_NZI[:, 0], self.MTX_NZI[:, 1]]
        # Scipy sparse slices can return matrix objects, rather than array
        if isinstance(matSlice, matrix):
            matSlice = array(matSlice)
        if len(matSlice.shape) != 1:
            matSlice = matSlice.reshape(self.N_MTX * 2)
        assert_array_equal(matSlice, self.MTX_NZV)

    def test_sparsity(self):
        """Verify the use of sparse matrices on the reader"""
        shouldBeSparse = self.USE_SPARSE
        self.assertEqual(hasattr(self.reader.depmtx, 'indptr'), shouldBeSparse)
        if hasattr(self.reader, 'sparse'):
            self.assertEqual(self.reader.sparse, shouldBeSparse)


class DepmtxReaderTesterBase(DepmtxTestHelper):
    """Base class for tests that utilize the DepmtxReader directly"""

    @classmethod
    def setUpClass(cls):
        cls.reader = DepmtxReader(TEST_FILE, cls.USE_SPARSE)
        cls.reader.read()


class DenseTesterMixin(object):
    """Object that instructs testers not to use sparse matrices."""
    USE_SPARSE = False


class SparseTesterMixin(object):
    """Object that instructs testers to use sparse matrices."""
    USE_SPARSE = True


class DenseDepmtxTester(DenseTesterMixin, DepmtxReaderTesterBase):
    """Class that tests a non-sparse depletion matrix reader"""


class SparseDepmtxTester(SparseTesterMixin, DepmtxReaderTesterBase):
    """Class that tests a sparse depletion matrix reader"""


class DummyReader(object):
    """
    Temporary reader to hold attributes from readDepmtx and depmtx functions
    """
    __slots__ = ('n0', 'n1', 'deltaT', 'depmtx', 'zai')


class ReadDepmtxFuncTesterBase(DepmtxTestHelper):
    """
    Reader that utilizes the readDepmtx function to return depletion values
    """

    @classmethod
    def setUpClass(cls):
        reader = DummyReader()
        (reader.deltaT, reader.n0, reader.zai, reader.depmtx, reader.n1) = (
            readDepmtx(TEST_FILE, cls.USE_SPARSE))
        cls.reader = reader


class DenseReadDepmtxFuncTester(ReadDepmtxFuncTesterBase, DenseTesterMixin):
    """Class that tests the dense readDepmtx function"""


class SparseReadDepmtxFuncTester(ReadDepmtxFuncTesterBase, DenseTesterMixin):
    """Class that tests the sparse readDepmtx function"""


del DepmtxTestHelper, DepmtxReaderTesterBase, ReadDepmtxFuncTesterBase


if __name__ == '__main__':
    from unittest import main
    main()
